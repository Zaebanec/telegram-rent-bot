document.addEventListener('DOMContentLoaded', () => {
    const tg = window.Telegram.WebApp;
    tg.ready();
    tg.expand();

    const calendarContainer = document.getElementById('calendar-container');
    const loader = document.getElementById('loader');
    const urlParams = new URLSearchParams(window.location.search);
    const propertyId = urlParams.get('property_id');
    
    if (!propertyId) {
        calendarContainer.innerHTML = '<p style="color: red;">–û—à–∏–±–∫–∞: ID –æ–±—ä–µ–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ URL.</p>';
        return;
    }

    let currentYear, currentMonth;
    let calendarData = {};
    let selection = { start: null, end: null };
    let isLoading = false;
    const monthNames = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"];
    const dayNames = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"];

    // ... (—Ñ—É–Ω–∫—Ü–∏–∏ fetchAndRenderMonth, renderMonth, updateSelectionHighlight –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    async function fetchAndRenderMonth(year, month) { /* ... */ }
    function renderMonth(year, month) { /* ... */ }
    function updateSelectionHighlight() {
        document.querySelectorAll('.day-cell[data-date]').forEach(cell => {
            const cellDate = new Date(cell.dataset.date + 'T00:00:00');
            const inSelection = selection.start && cellDate >= selection.start && (selection.end || selection.start) && cellDate <= (selection.end || selection.start);
            cell.classList.toggle('selected', inSelection);
        });
    }

    // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è ---
    calendarContainer.addEventListener('click', (e) => {
        const cell = e.target.closest('.day-cell');
        if (!cell || !cell.dataset.date || cell.classList.contains('disabled')) return;
        
        const clickedDate = new Date(cell.dataset.date + 'T00:00:00');

        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫ –∏–ª–∏ –º—ã –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        if (!selection.start || selection.end) {
            selection.start = clickedDate;
            selection.end = null;
            updateSelectionHighlight();
        } 
        // –ï—Å–ª–∏ —ç—Ç–æ –≤—Ç–æ—Ä–æ–π –∫–ª–∏–∫
        else {
            // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —Ç—É –∂–µ –¥–∞—Ç—É (–¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ–¥–Ω–æ–π –¥–∞—Ç—ã)
            if (clickedDate.getTime() === selection.start.getTime()) {
                selection.end = clickedDate; // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω–æ–π –¥–∞—Ç–µ
                showActionPopup();
            } 
            // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –¥—Ä—É–≥—É—é –¥–∞—Ç—É (–¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞)
            else {
                if (clickedDate < selection.start) {
                    selection.end = selection.start;
                    selection.start = clickedDate;
                } else {
                    selection.end = clickedDate;
                }
                showActionPopup();
            }
            updateSelectionHighlight();
        }
    });

    window.addEventListener('scroll', () => { /* ... */ });

    // ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ handlePopupAction, setPeriodAvailability, handleSetPrice, main –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    function showActionPopup() {
        if (!selection.start) return;
        const isSingleDate = !selection.end || selection.start.getTime() === selection.end.getTime();
        const startDateStr = selection.start.toLocaleDateString('ru-RU');
        const endDateStr = selection.end.toLocaleDateString('ru-RU');
        const message = isSingleDate ? `–ü—Ä–∏–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –¥–∞—Ç—ã: ${startDateStr}` : `–ü—Ä–∏–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞: ${startDateStr} - ${endDateStr}`;

        tg.showPopup({
            title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç–∞–º–∏',
            message: message,
            buttons: [
                { id: 'block', type: 'default', text: 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' },
                { id: 'unblock', type: 'default', text: '‚úÖ –°–¥–µ–ª–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏' },
                { id: 'set_price', type: 'default', text: 'üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É' },
                { type: 'cancel' },
            ]
        }, (buttonId) => handlePopupAction(buttonId));
    }
    
    function handlePopupAction(buttonId) {
        if (!buttonId) {
            selection.start = null;
            selection.end = null;
            updateSelectionHighlight();
            return;
        }
        switch (buttonId) {
            case 'block':
                const comment = prompt("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):", "");
                if (comment !== null) setPeriodAvailability(false, comment);
                break;
            case 'unblock':
                setPeriodAvailability(true, null);
                break;
            case 'set_price':
                handleSetPrice();
                break;
        }
    }

    async function setPeriodAvailability(isAvailable, comment) {
        const dates = [];
        const endDate = selection.end || selection.start;
        for (let d = new Date(selection.start); d <= endDate; d.setDate(d.getDate() + 1)) {
            dates.push(d.toISOString().split('T')[0]);
        }
        
        setLoaderVisible(true);
        try {
            const response = await fetch(`/api/owner/set_availability`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    property_id: propertyId, 
                    dates: dates, 
                    is_available: isAvailable,
                    comment: comment
                })
            });
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.');
            tg.showPopup({ title: '–£—Å–ø–µ—Ö', message: `–°—Ç–∞—Ç—É—Å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.` });
        } catch (error) {
            tg.showAlert(`–û—à–∏–±–∫–∞: ${error.message}`);
        } finally {
            selection.start = null;
            selection.end = null;
            calendarContainer.innerHTML = '';
            main();
        }
    }

    async function handleSetPrice() {
        const price = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:", "5000");
        if (price === null || isNaN(parseInt(price)) || parseInt(price) <= 0) {
            if (price !== null) tg.showAlert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è.");
            selection.start = null;
            selection.end = null;
            updateSelectionHighlight();
            return;
        }
        const startDate = selection.start.toISOString().split('T')[0];
        const endDate = (selection.end || selection.start).toISOString().split('T')[0];
        setLoaderVisible(true);
        try {
            const response = await fetch(`/api/owner/price_rule`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    property_id: propertyId,
                    start_date: startDate,
                    end_date: endDate,
                    price: parseInt(price)
                })
            });
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–Ω—ã.');
            tg.showPopup({ title: '–£—Å–ø–µ—Ö', message: `–¶–µ–Ω–∞ ${price}‚ÇΩ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ —Å ${startDate} –ø–æ ${endDate}.` });
        } catch (error) {
            tg.showAlert(`–û—à–∏–±–∫–∞: ${error.message}`);
        } finally {
            selection.start = null;
            selection.end = null;
            calendarContainer.innerHTML = '';
            main();
        }
    }

    async function main() {
        const today = new Date();
        currentYear = today.getFullYear();
        currentMonth = today.getMonth();
        for (let i = 0; i < 4; i++) {
            let yearToLoad = currentYear;
            let monthToLoad = currentMonth + i;
            if (monthToLoad > 11) {
                yearToLoad += Math.floor(monthToLoad / 12);
                monthToLoad = monthToLoad % 12;
            }
            await fetchAndRenderMonth(yearToLoad, monthToLoad);
        }
    }
    main();
});