from aiogram import F, Router
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, KeyboardButton, InputMediaPhoto
# --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨: –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –∏–º–ø–æ—Ä—Ç ---
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

from app.services.property_service import get_all_properties
from app.services.review_service import get_reviews_summary
from app.keyboards.inline_keyboards import (get_region_keyboard, get_district_keyboard, 
                                            get_property_card_keyboard, get_guests_keyboard)
from app.core.constants import DISTRICTS
from app.utils.states import SearchProperties

router = Router()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

async def show_properties_by_filter(message: Message, state: FSMContext):
    """
    –§–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –ë–î –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
    """
    data = await state.get_data()
    
    # –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –ë–î –ø–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º
    properties = await get_all_properties(
        districts=data.get('districts'),
        max_price=data.get('max_price'),
        min_guests=data.get('min_guests')
    )
    
    await state.clear()

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    if not properties:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.")
        return

    await message.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(properties)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
    for prop in properties:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        avg_rating, reviews_count = await get_reviews_summary(prop.id)
        
        rating_info = ""
        if reviews_count > 0 and avg_rating is not None:
            rating_info = f"‚≠êÔ∏è **{avg_rating:.1f}/5.0** ({reviews_count} –æ—Ç–∑—ã–≤–æ–≤)\n"

        verified_icon = "‚úÖ" if prop.is_verified else ""
        rooms_str = f"{prop.rooms} –∫–æ–º–Ω." if prop.rooms > 0 else "–°—Ç—É–¥–∏—è"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –æ–±—ä–µ–∫—Ç–∞
        caption = (
            f"{verified_icon} üè† **{prop.title}**\n"
            f"{rating_info}\n"
            f"üìù {prop.description}\n\n"
            f"üìç –†–∞–π–æ–Ω: {prop.district}\n"
            f"üó∫Ô∏è –ê–¥—Ä–µ—Å: {prop.address}\n"
            f"üõèÔ∏è –ö–æ–º–Ω–∞—Ç—ã: {rooms_str}\n"
            f"üí∞ –¶–µ–Ω–∞: {prop.price_per_night} —Ä—É–±/–Ω–æ—á—å\n"
            f"üë• –ì–æ—Å—Ç–µ–π: –¥–æ {prop.max_guests}"
        )
        
        photo_files = [media.file_id for media in prop.media if media.media_type == 'photo']
        video_note_id = next((media.file_id for media in prop.media if media.media_type == 'video_note'), None)

        # –ü–µ—Ä–µ–¥–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–¥–∏–∞ –∏ –æ—Ç–∑—ã–≤–æ–≤ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_property_card_keyboard(prop.id, len(photo_files), bool(video_note_id), reviews_count)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–º
        if photo_files:
            await message.answer_photo(
                photo=photo_files[0],
                caption=caption,
                reply_markup=keyboard
            )
        else:
            await message.answer(caption, reply_markup=keyboard)


def get_skip_keyboard(text: str = "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π."""
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text=text))
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)

# --- –õ–æ–≥–∏–∫–∞ –ü–æ–∏—Å–∫–∞ (FSM) ---

@router.callback_query(F.data == "main_menu:search")
async def start_search(callback: CallbackQuery, state: FSMContext):
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∏—Å–∫. –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    await callback.message.edit_text("–î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä–µ–º –≤–∞–º –∂–∏–ª—å–µ. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:", reply_markup=get_region_keyboard())
    await state.set_state(SearchProperties.region)
    await callback.answer()

@router.callback_query(SearchProperties.region, F.data.startswith("add_property_region:"))
async def search_select_region(callback: CallbackQuery, state: FSMContext):
    """–®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–µ–≥–∏–æ–Ω."""
    region = callback.data.split(":")[1]
    await state.update_data(region=region)
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ö—É—Ä—à—Å–∫–∞—è –∫–æ—Å–∞, —Ç–∞–º –Ω–µ—Ç –ø–æ–¥-—Ä–∞–π–æ–Ω–æ–≤, –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ —Ü–µ–Ω–µ
    if region == "–ö—É—Ä—à—Å–∫–∞—è –∫–æ—Å–∞":
        await state.update_data(districts=[region]) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –∏–∑ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        await callback.message.answer(
            "–†–∞–π–æ–Ω –≤—ã–±—Ä–∞–Ω. –£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –Ω–æ—á—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5000) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥.",
            reply_markup=get_skip_keyboard()
        )
        await state.set_state(SearchProperties.price)
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–∞–π–æ–Ω–æ–≤
        await callback.message.edit_text("–£—Ç–æ—á–Ω–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:", reply_markup=get_district_keyboard(region))
        await state.set_state(SearchProperties.district)
    await callback.answer()

@router.callback_query(SearchProperties.district, F.data == "back_to_regions")
async def search_back_to_regions(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Ä–µ–≥–∏–æ–Ω–∞."""
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:", reply_markup=get_region_keyboard())
    await state.set_state(SearchProperties.region)
    await callback.answer()

@router.callback_query(SearchProperties.district, F.data.startswith("search_all_in_region:"))
async def search_all_in_region(callback: CallbackQuery, state: FSMContext):
    """–®–∞–≥ 2 (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤—Å–µ —Ä–∞–π–æ–Ω—ã –≤ —Ä–µ–≥–∏–æ–Ω–µ."""
    region = callback.data.split(":")[1]
    districts_in_region = DISTRICTS.get(region, [])
    
    await state.update_data(districts=districts_in_region)
    
    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ '{region}'.")
    await callback.message.answer(
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –Ω–æ—á—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5000) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥.", 
        reply_markup=get_skip_keyboard()
    )
    await state.set_state(SearchProperties.price)
    await callback.answer()

@router.callback_query(SearchProperties.district, F.data.startswith("add_prop_dist:"))
async def search_select_district(callback: CallbackQuery, state: FSMContext):
    """–®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–∞–π–æ–Ω."""
    _, region, district_index_str = callback.data.split(":")
    district_index = int(district_index_str)
    district_name = DISTRICTS[region][district_index]
    
    await state.update_data(districts=[district_name]) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫
    
    await callback.message.edit_text("–†–∞–π–æ–Ω –≤—ã–±—Ä–∞–Ω.")
    await callback.message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –Ω–æ—á—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5000) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥.", 
        reply_markup=get_skip_keyboard()
    )
    await state.set_state(SearchProperties.price)
    await callback.answer()

@router.message(SearchProperties.price)
async def search_by_price(message: Message, state: FSMContext):
    """–®–∞–≥ 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ü–µ–Ω—É –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–ª —à–∞–≥."""
    if message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        if not message.text.isdigit() or int(message.text) <= 0:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        await state.update_data(max_price=int(message.text))
    
    # –£–±–∏—Ä–∞–µ–º Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    await message.answer(
        "–•–æ—Ä–æ—à–æ. –ù–∞ –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –∏—â–µ—Ç–µ –∂–∏–ª—å–µ?", 
        reply_markup=ReplyKeyboardRemove()
    )
    
    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≥–æ—Å—Ç–µ–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–µ–π –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    builder = InlineKeyboardBuilder.from_markup(get_guests_keyboard())
    builder.row(KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_guests_filter"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:", reply_markup=builder.as_markup())

    await state.set_state(SearchProperties.guests)

@router.callback_query(SearchProperties.guests, F.data == "skip_guests_filter")
async def search_skip_guests(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≥–æ—Å—Ç—è–º."""
    await callback.message.edit_text("–§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Å—Ç—è–º –ø—Ä–æ–ø—É—â–µ–Ω. –ò–¥–µ—Ç –ø–æ–∏—Å–∫...")
    await show_properties_by_filter(callback.message, state)
    await callback.answer()

@router.callback_query(SearchProperties.guests, F.data.startswith("add_property_guests:"))
async def search_by_guests(callback: CallbackQuery, state: FSMContext):
    """–®–∞–≥ 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π."""
    guests = callback.data.split(":")[1]
    value_to_save = int(guests.replace('+', ''))
    await state.update_data(min_guests=value_to_save)
    
    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω–æ –≥–æ—Å—Ç–µ–π: {guests}. –ò–¥–µ—Ç –ø–æ–∏—Å–∫...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –∏ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    await show_properties_by_filter(callback.message, state)
    await callback.answer()

# --- –û—Ç–º–µ–Ω–∞ –∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ ---

@router.message(StateFilter(SearchProperties), Command("cancel"))
@router.message(StateFilter(SearchProperties), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_search_handler(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–∏—Å–∫–∞ –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏."""
    await state.clear()
    await message.answer("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=ReplyKeyboardRemove())

@router.message(StateFilter(SearchProperties))
async def incorrect_search_input(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ (–Ω–µ –ø–æ –∫–Ω–æ–ø–∫–µ/–∫–æ–º–∞–Ω–¥–µ)."""
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏. –î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ /cancel")