import logging
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

from aiogram import Router, F, Bot
from aiogram.exceptions import TelegramAPIError
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨: –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã ---
from app.services.property_service import set_property_verified
from app.services.booking_service import update_booking_status, get_booking_with_details
from app.services.user_service import set_user_role
from app.core.settings import settings
from app.core.scheduler import scheduler, request_review

router = Router()
# –§–∏–ª—å—Ç—Ä –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
router.message.filter(F.from_user.id.in_(settings.ADMIN_IDS))
router.callback_query.filter(F.from_user.id.in_(settings.ADMIN_IDS))


@router.message(Command("setrole"))
async def set_user_role_handler(message: Message):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    –§–æ—Ä–º–∞—Ç: /setrole <user_id> <role>
    –†–æ–ª–∏: user, owner, admin
    """
    try:
        parts = message.text.split()
        if len(parts) != 3: raise ValueError()
        
        user_id = int(parts[1])
        role = parts[2].lower()

        if role not in ['user', 'owner', 'admin']:
            await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: user, owner, admin.")
            return

        await set_user_role(user_id, role)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ —Ä–æ–ª—å '{role}'.")

    except (IndexError, ValueError):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setrole <ID> <—Ä–æ–ª—å>")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@router.message(Command("verify"))
async def verify_property(message: Message):
    """
    –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç –ø–æ ID.
    –§–æ—Ä–º–∞—Ç: /verify 123
    """
    try:
        property_id = int(message.text.split()[1])
        await set_property_verified(property_id, status=True)
        await message.answer(f"–û–±—ä–µ–∫—Ç —Å ID {property_id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω ‚úÖ.")
    except (IndexError, ValueError):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /verify <ID –æ–±—ä–µ–∫—Ç–∞>")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@router.message(Command("unverify"))
async def unverify_property(message: Message):
    """
    –°–Ω–∏–º–∞–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Å –æ–±—ä–µ–∫—Ç–∞ –ø–æ ID.
    –§–æ—Ä–º–∞—Ç: /unverify 123
    """
    try:
        property_id = int(message.text.split()[1])
        await set_property_verified(property_id, status=False)
        await message.answer(f"–° –æ–±—ä–µ–∫—Ç–∞ —Å ID {property_id} –±—ã–ª–∞ —Å–Ω—è—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è.")
    except (IndexError, ValueError):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /unverify <ID –æ–±—ä–µ–∫—Ç–∞>")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ---

@router.callback_query(F.data.startswith("booking:confirm:"))
async def confirm_booking(callback: CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–Ω—è—Ç—å" –∑–∞—è–≤–∫—É.
    """
    booking_id = int(callback.data.split(":")[2])
    
    await update_booking_status(booking_id, "confirmed")
    booking = await get_booking_with_details(booking_id)
    if not booking:
        await callback.answer("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    await callback.message.edit_text(f"{callback.message.text}\n\n--- \n‚úÖ –í–´ –ü–†–ò–ù–Ø–õ–ò –≠–¢–£ –ó–ê–Ø–í–ö–£ ---")
    
    try:
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–∑—ã–≤ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
        run_date = datetime.now(ZoneInfo("Europe/Kaliningrad")) + timedelta(minutes=2)
        scheduler.add_job(
            request_review,
            'date',
            run_date=run_date,
            kwargs={
                "bot_token": settings.BOT_TOKEN.get_secret_value(),
                "chat_id": booking.user.telegram_id,
                "booking_id": booking.id,
                "property_title": booking.property.title
            }
        )
        logging.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {booking.id} –Ω–∞ {run_date}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–∑—ã–≤: {e}")

    try:
        await bot.send_message(
            chat_id=booking.user.telegram_id,
            text=f"üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ ¬´{booking.property.title}¬ª –±—ã–ª–∞ –û–î–û–ë–†–ï–ù–ê!\n\n–í–ª–∞–¥–µ–ª–µ—Ü —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
        )
    except TelegramAPIError as e:
        logging.error(f"Telegram API Error –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä—É: {e}")
        
    await callback.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É!")


@router.callback_query(F.data.startswith("booking:reject:"))
async def reject_booking(callback: CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–∫–ª–æ–Ω–∏—Ç—å" –∑–∞—è–≤–∫—É.
    """
    booking_id = int(callback.data.split(":")[2])
    
    await update_booking_status(booking_id, "rejected")
    booking = await get_booking_with_details(booking_id)
    if not booking:
        await callback.answer("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    await callback.message.edit_text(f"{callback.message.text}\n\n--- \n‚ùå –í–´ –û–¢–ö–õ–û–ù–ò–õ–ò –≠–¢–£ –ó–ê–Ø–í–ö–£ ---")

    try:
        await bot.send_message(
            chat_id=booking.user.telegram_id,
            text=f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ ¬´{booking.property.title}¬ª –±—ã–ª–∞ –û–¢–ö–õ–û–ù–ï–ù–ê."
        )
    except TelegramAPIError as e:
        logging.error(f"Telegram API Error –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä—É: {e}")
        
    await callback.answer("–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É.")