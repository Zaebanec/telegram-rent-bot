import logging
from datetime import datetime, date
from aiogram import F, Router
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (Message, CallbackQuery, ReplyKeyboardRemove,
                           InputMediaPhoto, InlineKeyboardButton)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback

from app.services import availability_service, booking_service
from app.utils.states import EditProperty
from app.services.property_service import get_property_with_media_and_owner, update_property_field
from app.services.media_service import (delete_one_media_item, add_photos_to_property,
                                        add_video_note_to_property)
from app.keyboards.inline_keyboards import (get_edit_property_keyboard, get_region_keyboard,
                                           get_district_keyboard, get_rooms_keyboard,
                                           get_guests_keyboard, get_property_types_keyboard,
                                           get_media_management_keyboard, get_delete_one_media_keyboard,
                                           get_finish_upload_keyboard, get_skip_video_keyboard,
                                           get_calendar)
from .manage_property import my_properties_list
from app.core.constants import DISTRICTS

router = Router()


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

async def show_edit_menu(message_or_callback: Message | CallbackQuery, state: FSMContext, message_text: str | None = None):
    data = await state.get_data()
    property_id = data.get('property_id')

    if not property_id:
        logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω property_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        if isinstance(message_or_callback, CallbackQuery):
            await message_or_callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        else:
            await message_or_callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    prop, _, _ = await get_property_with_media_and_owner(property_id)
    if not prop:
        await message_or_callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.")
        await state.clear()
        return

    text = message_text or f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞: **{prop.title}**\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
    keyboard = get_edit_property_keyboard(property_id)

    if isinstance(message_or_callback, Message):
        await message_or_callback.answer(text, reply_markup=keyboard)
    else:
        try:
            await message_or_callback.message.edit_text(text, reply_markup=keyboard)
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ show_edit_menu: {e}")
            await message_or_callback.answer()


    await state.set_state(EditProperty.choosing_field)


async def start_media_management(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    property_id = data.get('property_id')
    prop, _, _ = await get_property_with_media_and_owner(property_id)

    await callback_query.message.delete()
    await callback_query.message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏:")
    if not prop.media:
        await callback_query.message.answer("–£ —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –µ—â–µ –Ω–µ—Ç —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
    else:
        await callback_query.message.answer("–¢–µ–∫—É—â–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ üóëÔ∏è –ø–æ–¥ –∫–∞–∂–¥—ã–º, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å.")
        for media in prop.media:
            if media.media_type == 'photo':
                await callback_query.message.answer_photo(media.file_id, reply_markup=get_delete_one_media_keyboard(media.id))
            elif media.media_type == 'video_note':
                await callback_query.message.answer_video_note(media.file_id, reply_markup=get_delete_one_media_keyboard(media.id))

    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_media_management_keyboard(property_id))
    await state.set_state(EditProperty.managing_media)

# --- –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ ---

@router.callback_query(F.data.startswith("manage:edit:"))
async def start_property_edit(callback: CallbackQuery, state: FSMContext):
    property_id = int(callback.data.split(":")[2])
    await state.update_data(property_id=property_id)
    await show_edit_menu(callback, state)
    await callback.answer()

# --- –ì–ª–∞–≤–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
@router.callback_query(EditProperty.choosing_field, F.data.startswith("edit_prop:"))
async def edit_field_prompt(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split(":")
    field = parts[1]

    if field == 'media':
        await start_media_management(callback, state)
        await callback.answer()
        return
    elif field == 'availability':
        await start_availability_management(callback, state)
        return

    prompts = {
        "title": ("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", EditProperty.editing_title),
        "description": ("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:", EditProperty.editing_description),
        "address": ("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:", EditProperty.editing_address),
        "price": ("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∑–∞ –Ω–æ—á—å (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):", EditProperty.editing_price),
        "location": ("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω:", EditProperty.editing_region),
        "rooms": ("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç:", EditProperty.editing_rooms),
        "guests": ("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π:", EditProperty.editing_guests),
        "type": ("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞:", EditProperty.editing_type),
    }

    if field in prompts:
        prompt_text, new_state = prompts[field]
        keyboard = None
        if field == 'location': keyboard = get_region_keyboard()
        if field == 'rooms': keyboard = get_rooms_keyboard()
        if field == 'guests': keyboard = get_guests_keyboard()
        if field == 'type': keyboard = get_property_types_keyboard()

        await callback.message.edit_text(prompt_text, reply_markup=keyboard)
        await state.set_state(new_state)

    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π ---

@router.message(StateFilter(EditProperty.editing_title, EditProperty.editing_description, EditProperty.editing_address))
async def process_new_text_field(message: Message, state: FSMContext):
    current_state_str = await state.get_state()
    field_map = {
        EditProperty.editing_title.state: 'title',
        EditProperty.editing_description.state: 'description',
        EditProperty.editing_address.state: 'address',
    }
    field_to_update = field_map[current_state_str]

    data = await state.get_data()
    await update_property_field(data['property_id'], field_to_update, message.text)

    await message.answer(f"–ü–æ–ª–µ '{field_to_update.replace('_', ' ').capitalize()}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await show_edit_menu(message, state)

@router.message(EditProperty.editing_price)
async def process_new_price(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ü–∏—Ñ—Ä–∞–º–∏.")
        return
    data = await state.get_data()
    await update_property_field(data['property_id'], 'price_per_night', int(message.text))
    await message.answer("–¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    await show_edit_menu(message, state)

@router.callback_query(StateFilter(EditProperty.editing_rooms, EditProperty.editing_guests, EditProperty.editing_type))
async def process_new_button_field(callback: CallbackQuery, state: FSMContext):
    current_state_str = await state.get_state()
    field_map = {
        EditProperty.editing_rooms.state: ('rooms', 'add_property_rooms:'),
        EditProperty.editing_guests.state: ('max_guests', 'add_property_guests:'),
        EditProperty.editing_type.state: ('property_type', 'add_property_type:'),
    }
    field_to_update, prefix = field_map[current_state_str]
    value = callback.data.replace(prefix, '')

    if field_to_update == 'rooms':
        value_to_save = 0 if value == '–°—Ç—É–¥–∏—è' else int(value.replace('+', ''))
    elif field_to_update == 'max_guests':
        value_to_save = int(value.replace('+', ''))
    else:
        value_to_save = value

    data = await state.get_data()
    await update_property_field(data['property_id'], field_to_update, value_to_save)

    await callback.message.answer(f"–ü–æ–ª–µ '{field_to_update.replace('_', ' ').capitalize()}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await show_edit_menu(callback, state)
    await callback.answer()

@router.callback_query(EditProperty.editing_region, F.data.startswith("add_property_region:"))
async def process_new_region(callback: CallbackQuery, state: FSMContext):
    region = callback.data.split(":")[1]
    if region == "–ö—É—Ä—à—Å–∫–∞—è –∫–æ—Å–∞":
        data = await state.get_data()
        await update_property_field(data['property_id'], 'district', region)
        await callback.message.answer("–†–∞–π–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        await show_edit_menu(callback, state)
    else:
        await callback.message.edit_text("–£—Ç–æ—á–Ω–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:", reply_markup=get_district_keyboard(region))
        await state.set_state(EditProperty.editing_district)
    await callback.answer()

@router.callback_query(EditProperty.editing_district, F.data.startswith("add_prop_dist:"))
async def process_new_district(callback: CallbackQuery, state: FSMContext):
    _, region, district_index_str = callback.data.split(":")
    district_index = int(district_index_str)
    district_name = DISTRICTS[region][district_index]
    data = await state.get_data()
    await update_property_field(data['property_id'], 'district', district_name)
    await callback.message.answer("–†–∞–π–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await show_edit_menu(callback, state)
    await callback.answer()

# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–û–°–¢–£–ü–ù–û–°–¢–¨–Æ ---

async def _show_availability_calendar(callback: CallbackQuery, state: FSMContext):
    property_id = (await state.get_data())['property_id']
    
    manual_unavailable = await availability_service.get_unavailable_dates(property_id)
    booked_dates = await booking_service.get_booked_dates_for_property(property_id)
    all_unavailable_dates = sorted(list(set(manual_unavailable + booked_dates)))

    text = "üóìÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é**\n\n"
    if all_unavailable_dates:
        dates_str = ", ".join([d.strftime("%d.%m") for d in all_unavailable_dates])
        text += f"üö´ **–ó–∞–Ω—è—Ç—ã–µ –¥–∞—Ç—ã (–±—Ä–æ–Ω–∏ + –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏):**\n`{dates_str}`\n\n"
    
    text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–∞—Ç—É –¥–ª—è —Ä—É—á–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ', –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ."

    calendar_keyboard = await get_calendar()
    builder = InlineKeyboardBuilder.from_markup(calendar_keyboard)
    builder.row(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="availability:done"))
    
    try:
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
    except Exception as e:
        logging.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å (—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å): {e}")
        await callback.answer()

async def start_availability_management(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(EditProperty.managing_availability)
    await _show_availability_calendar(callback, state)

@router.callback_query(EditProperty.managing_availability, SimpleCalendarCallback.filter())
async def process_availability_date(callback: CallbackQuery, callback_data: SimpleCalendarCallback, state: FSMContext):
    calendar = SimpleCalendar()
    selected, date_obj = await calendar.process_selection(callback, callback_data)

    if selected:
        property_id = (await state.get_data())['property_id']
        selected_date = date_obj.date()

        if selected_date < date.today():
            await callback.answer("–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É.", show_alert=True)
            return
        
        booked_dates = await booking_service.get_booked_dates_for_property(property_id)
        if selected_date in booked_dates:
            await callback.answer("–≠—Ç—É –¥–∞—Ç—É –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å, –æ–Ω–∞ –∑–∞–Ω—è—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –±—Ä–æ–Ω—å—é.", show_alert=True)
            return

        manual_unavailable = await availability_service.get_unavailable_dates(property_id)
        if selected_date in manual_unavailable:
            await availability_service.remove_unavailable_date(property_id, selected_date)
            await callback.answer(f"–î–∞—Ç–∞ {selected_date.strftime('%d.%m.%Y')} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.")
        else:
            await availability_service.add_unavailable_date(property_id, selected_date)
            await callback.answer(f"–î–∞—Ç–∞ {selected_date.strftime('%d.%m.%Y')} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.")
            
        await _show_availability_calendar(callback, state)
    else:
        # –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        await _show_availability_calendar(callback, state)

@router.callback_query(EditProperty.managing_availability, F.data == "availability:done")
async def finish_availability_management(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    await show_edit_menu(callback, state, message_text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏ ---

@router.callback_query(EditProperty.managing_media, F.data.startswith("edit_media:delete:"))
async def delete_media_item_handler(callback: CallbackQuery):
    media_id = int(callback.data.split(":")[2])
    await delete_one_media_item(media_id)
    await callback.message.delete()
    await callback.answer("–ú–µ–¥–∏–∞—Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω.", show_alert=True)

@router.callback_query(EditProperty.managing_media, F.data.startswith("edit_media:add:"))
async def add_more_media_prompt(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ (–¥–æ 10) –∏–ª–∏ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ—á–µ–∫. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.",
        reply_markup=get_finish_upload_keyboard()
    )
    await state.set_state(EditProperty.adding_photos)
    await callback.answer()

@router.message(StateFilter(EditProperty.adding_photos), F.photo)
async def handle_new_photos_in_edit(message: Message, state: FSMContext):
    photos = (await state.get_data()).get('photos_to_add', [])
    if len(photos) >= 10:
        await message.answer("–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ 10 —Ñ–æ—Ç–æ. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É'.")
        return
    photos.append(message.photo[-1].file_id)
    await state.update_data(photos_to_add=photos)

@router.message(StateFilter(EditProperty.adding_photos), F.video_note)
async def handle_new_video_in_edit(message: Message, state: FSMContext):
    await state.update_data(video_to_add=message.video_note.file_id)
    await message.answer("–ö—Ä—É–∂–æ—á–µ–∫ –ø–æ–ª—É—á–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É'.")

@router.message(StateFilter(EditProperty.adding_photos), F.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É")
async def finish_adding_photos_in_edit(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get('photos_to_add')
    video = data.get('video_to_add')
    property_id = data.get('property_id')
    if not photos and not video:
        await message.answer("–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞. –ù–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.", reply_markup=ReplyKeyboardRemove())
        await show_edit_menu(message, state)
        return

    if photos: await add_photos_to_property(property_id, photos)
    if video: await add_video_note_to_property(property_id, video)
    
    await message.answer("–ù–æ–≤—ã–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!", reply_markup=ReplyKeyboardRemove())
    await state.update_data(photos_to_add=[], video_to_add=None)
    await show_edit_menu(message, state)

# --- –í—ã—Ö–æ–¥ –∏ –û—Ç–º–µ–Ω–∞ ---

@router.callback_query(StateFilter(EditProperty.managing_media), F.data.startswith("edit_media:done:"))
async def finish_media_management(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await show_edit_menu(callback, state)
    await callback.answer()

@router.callback_query(EditProperty.choosing_field, F.data == "back_to_my_properties")
async def back_to_list_from_edit(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    await my_properties_list(callback.message)
    await callback.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")

@router.message(StateFilter(EditProperty), Command("cancel"))
@router.message(StateFilter(EditProperty), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_edit_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
