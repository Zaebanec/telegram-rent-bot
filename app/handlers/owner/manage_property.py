from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

# –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
from app.services.property_service import (get_properties_by_owner, toggle_property_activity, 
                                         delete_property, get_property_with_media_and_owner,
                                         get_owner_properties_summary)
from app.services.booking_service import count_pending_bookings_for_owner
from app.keyboards.inline_keyboards import (get_property_management_keyboard, 
                                           get_delete_confirmation_keyboard)

router = Router()

def format_my_property_card(prop) -> str:
    status_verified = "‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" if prop.is_verified else "‚òëÔ∏è –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
    status_active = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if prop.is_active else "üî¥ –°–∫—Ä—ã—Ç"
    return (
        f"üÜî `{prop.id}`: **{prop.title}**\n"
        f"–°—Ç–∞—Ç—É—Å—ã: {status_verified}, {status_active}"
    )

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É ---
@router.message(Command("myproperties"))
async def my_properties_list(message: Message):
    owner_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    total_props, active_props = await get_owner_properties_summary(owner_id)
    pending_bookings = await count_pending_bookings_for_owner(owner_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    summary_text = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!\n\n"
        f"<b>–í–∞—à–∞ –ø—Ä–∏–±–æ—Ä–Ω–∞—è –ø–∞–Ω–µ–ª—å:</b>\n"
        f"–í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {total_props}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –≤ –ø–æ–∏—Å–∫–µ: {active_props}\n"
        f"–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –±—Ä–æ–Ω—å: {pending_bookings}"
    )
    await message.answer(summary_text)

    # –ü–æ–ª—É—á–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
    properties = await get_properties_by_owner(owner_id=owner_id)
    if not properties:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addproperty, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π.")
        return
    
    await message.answer("<b>–í–∞—à–∏ –æ–±—ä–µ–∫—Ç—ã:</b>")
    for prop in properties:
        await message.answer(
            format_my_property_card(prop),
            reply_markup=get_property_management_keyboard(prop.id, prop.is_active)
        )
# --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---


@router.callback_query(F.data.startswith("manage:toggle:"))
async def toggle_property_handler(callback: CallbackQuery):
    property_id = int(callback.data.split(":")[2])
    new_status = await toggle_property_activity(property_id)
    
    prop, _, _ = await get_property_with_media_and_owner(property_id)
    if prop:
        await callback.message.edit_text(
            format_my_property_card(prop),
            reply_markup=get_property_management_keyboard(prop.id, new_status)
        )
    await callback.answer()

@router.callback_query(F.data.startswith("manage:delete:"))
async def delete_property_handler(callback: CallbackQuery):
    property_id = int(callback.data.split(":")[2])
    await callback.message.edit_reply_markup(
        reply_markup=get_delete_confirmation_keyboard(property_id)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("manage:delete_confirm:"))
async def delete_confirm_handler(callback: CallbackQuery):
    property_id = int(callback.data.split(":")[2])
    await delete_property(property_id)
    await callback.message.edit_text(f"–û–±—ä–µ–∫—Ç —Å ID `{property_id}` –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    await callback.answer("–û–±—ä–µ–∫—Ç —É–¥–∞–ª–µ–Ω.", show_alert=True)

@router.callback_query(F.data == "manage:delete_cancel")
async def delete_cancel_handler(callback: CallbackQuery):
    # –í–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ç–∫–∏, –≤–µ—Ä–Ω–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –æ–±—ä–µ–∫—Ç–∞
    # –ò–∑-–∑–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏, –Ω–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ ID –æ–±—ä–µ–∫—Ç–∞ –≤ –∫–Ω–æ–ø–∫–µ
    prop_id = None
    for row in callback.message.reply_markup.inline_keyboard:
        for button in row:
            if button.callback_data.startswith("manage:edit:"):
                prop_id = int(button.callback_data.split(":")[-1])
                break
        if prop_id:
            break

    if prop_id:
        prop, _, _ = await get_property_with_media_and_owner(prop_id)
        if prop:
            await callback.message.edit_text(
                format_my_property_card(prop),
                reply_markup=get_property_management_keyboard(prop.id, prop.is_active)
            )
    else:
        await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")