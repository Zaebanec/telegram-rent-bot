from datetime import datetime, timedelta
from typing import List
from aiogram.types import InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData
from aiogram_calendar import SimpleCalendar

from app.core.constants import DISTRICTS, PROPERTY_TYPES, ROOM_OPTIONS, GUEST_OPTIONS
# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
from app.core.settings import settings

def get_main_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="üîç –ù–∞–π—Ç–∏ –∂–∏–ª—å–µ", callback_data="main_menu:search")
    builder.button(text="üè† –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç", callback_data="main_menu:add_property")
    builder.button(text="‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ", callback_data="main_menu:about")
    builder.adjust(1)
    return builder.as_markup()

def get_property_card_keyboard(property_id: int, photos_count: int = 0, has_video: bool = False, reviews_count: int = 0):
    builder = InlineKeyboardBuilder()
    total_media_count = photos_count + (1 if has_video else 0)

    if has_video:
        builder.button(text=f"‚ñ∂Ô∏è –í–∏–¥–µ–æ –∏ —Ñ–æ—Ç–æ ({total_media_count})", callback_data=f"view_media:{property_id}")
    elif photos_count > 1:
        builder.button(text=f"üì∏ –í—Å–µ —Ñ–æ—Ç–æ ({photos_count})", callback_data=f"view_photos:{property_id}")

    if reviews_count > 0:
        builder.button(text=f"üí¨ –ß–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã ({reviews_count})", callback_data=f"view_reviews:{property_id}")
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
    web_app_url = f"{settings.WEB_APP_BASE_URL}/webapp/client?property_id={property_id}"

    builder.button(text="üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", web_app=WebAppInfo(url=web_app_url))
    
    builder.adjust(1)
    return builder.as_markup()

def get_rating_keyboard(booking_id: int):
    builder = InlineKeyboardBuilder()
    for i in range(1, 6):
        builder.button(text=f"‚≠êÔ∏è {i}", callback_data=f"review:{booking_id}:rating:{i}")
    builder.adjust(5)
    return builder.as_markup()

async def get_calendar():
    calendar = SimpleCalendar()
    calendar.set_dates_range(datetime.now(), datetime.now() + timedelta(days=365))
    return await calendar.start_calendar()

def get_region_keyboard():
    builder = InlineKeyboardBuilder()
    for region in DISTRICTS.keys():
        builder.button(text=region, callback_data=f"add_property_region:{region}")
    builder.adjust(2)
    return builder.as_markup()

def get_district_keyboard(region: str):
    builder = InlineKeyboardBuilder()
    builder.button(text=f"‚û°Ô∏è –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ '{region}'", callback_data=f"search_all_in_region:{region}")
    for index, district_name in enumerate(DISTRICTS[region]):
        builder.button(text=district_name, callback_data=f"add_prop_dist:{region}:{index}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_regions")
    builder.adjust(1)
    return builder.as_markup()

def get_rooms_keyboard():
    builder = InlineKeyboardBuilder()
    for option in ROOM_OPTIONS:
        builder.button(text=option, callback_data=f"add_property_rooms:{option}")
    builder.adjust(3)
    return builder.as_markup()

def get_guests_keyboard():
    builder = InlineKeyboardBuilder()
    for option in GUEST_OPTIONS:
        builder.button(text=option, callback_data=f"add_property_guests:{option}")
    builder.adjust(4)
    return builder.as_markup()

def get_property_types_keyboard():
    builder = InlineKeyboardBuilder()
    for prop_type in PROPERTY_TYPES:
        builder.button(text=prop_type, callback_data=f"add_property_type:{prop_type}")
    builder.adjust(2)
    return builder.as_markup()

def get_property_management_keyboard(property_id: int, is_active: bool):
    builder = InlineKeyboardBuilder()
    if is_active:
        builder.button(text="üî¥ –°–∫—Ä—ã—Ç—å", callback_data=f"manage:toggle:{property_id}")
    else:
        builder.button(text="üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"manage:toggle:{property_id}")
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"manage:edit:{property_id}")
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"manage:delete:{property_id}")
    builder.adjust(2, 1)
    return builder.as_markup()

def get_delete_confirmation_keyboard(property_id: int):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"manage:delete_confirm:{property_id}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"manage:delete_cancel")
    return builder.as_markup()

def get_edit_property_keyboard(property_id: int):
    builder = InlineKeyboardBuilder()
    builder.button(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_prop:title:{property_id}")
    builder.button(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_prop:description:{property_id}")
    builder.button(text="–ê–¥—Ä–µ—Å", callback_data=f"edit_prop:address:{property_id}")
    builder.button(text="–ö–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç", callback_data=f"edit_prop:rooms:{property_id}")
    builder.button(text="–¶–µ–Ω—É", callback_data=f"edit_prop:price:{property_id}")
    builder.button(text="–ö–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π", callback_data=f"edit_prop:guests:{property_id}")
    builder.button(text="–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞", callback_data=f"edit_prop:type:{property_id}")
    builder.button(text="üì∏ –£–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ", callback_data=f"edit_prop:media:{property_id}")
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: URL –¥–ª—è Web App –≤–ª–∞–¥–µ–ª—å—Ü–∞ ---
    owner_web_app_url = f"{settings.WEB_APP_BASE_URL}/static/owner.html?property_id={property_id}"
    builder.button(text="üóìÔ∏è –£–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é", web_app=WebAppInfo(url=owner_web_app_url))
    
    builder.button(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_my_properties")
    builder.adjust(2, 2, 2, 1, 1, 1) # –ù–µ–º–Ω–æ–≥–æ –ø–æ–ø—Ä–∞–≤–∏–ª –≤–µ—Ä—Å—Ç–∫—É
    return builder.as_markup()

def get_delete_one_media_keyboard(media_id: int):
    builder = InlineKeyboardBuilder()
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ –º–µ–¥–∏–∞", callback_data=f"edit_media:delete:{media_id}")
    return builder.as_markup()

def get_media_management_keyboard(property_id: int):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ", callback_data=f"edit_media:add:{property_id}")
    builder.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"edit_media:done:{property_id}")
    builder.adjust(1)
    return builder.as_markup()

def get_finish_upload_keyboard():
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É")], [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)

def get_skip_video_keyboard():
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥")], [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True, one_time_keyboard=True)

def get_booking_management_keyboard(booking_id: int):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"booking:confirm:{booking_id}")
    builder.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"booking:reject:{booking_id}")
    builder.adjust(2)
    return builder.as_markup()